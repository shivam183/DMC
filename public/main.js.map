{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-record/add-record.component.css","webpack:///./src/app/add-record/add-record.component.html","webpack:///./src/app/add-record/add-record.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/edit-patient/edit-patient.component.css","webpack:///./src/app/edit-patient/edit-patient.component.html","webpack:///./src/app/edit-patient/edit-patient.component.ts","webpack:///./src/app/edit-record/edit-record.component.css","webpack:///./src/app/edit-record/edit-record.component.html","webpack:///./src/app/edit-record/edit-record.component.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/navbar/navbar.component.css","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/patient.service.ts","webpack:///./src/app/patients/patients.component.css","webpack:///./src/app/patients/patients.component.html","webpack:///./src/app/patients/patients.component.ts","webpack:///./src/app/profile/profile.component.css","webpack:///./src/app/profile/profile.component.html","webpack:///./src/app/profile/profile.component.ts","webpack:///./src/app/records.service.ts","webpack:///./src/app/records/record-filter.pipe.ts","webpack:///./src/app/records/records.component.css","webpack:///./src/app/records/records.component.html","webpack:///./src/app/records/records.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/view-patients/patient-filter.pipe.ts","webpack:///./src/app/view-patients/view-patients.component.css","webpack:///./src/app/view-patients/view-patients.component.html","webpack:///./src/app/view-patients/view-patients.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2 class=\\\"page-header text-center\\\">Add Record</h2>\\n  <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n\\n  <form [formGroup]=\\\"addRecord\\\" class=\\\"form-horizontal\\\" (submit)=\\\"onRecordSubmit()\\\">\\n    <div class=\\\"panel panel-primary\\\">\\n      <div class=\\\"panel-body\\\">\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.date}\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"date\\\">Date</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"date\\\" [(ngModel)]=\\\"date\\\" name=\\\"date\\\" placeholder=\\\"YYYY-MM-DD\\\" formControlName=\\\"date\\\" id=\\\"date\\\"\\n              class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.date\\\">\\n              {{formErrors.date}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.nurse}\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"nurse\\\">Nurse</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"nurse_name\\\" formControlName=\\\"nurse\\\" id=\\\"nurse\\\" class=\\\"form-control\\\"\\n              (blur)=\\\"logValidationErrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.nurse\\\">\\n              {{formErrors.nurse}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.type}\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"type\\\">Type</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" placeholder=\\\"Type\\\" [(ngModel)]=\\\"type\\\" formControlName=\\\"type\\\" id=\\\"type\\\" class=\\\"form-control\\\"\\n              (blur)=\\\"logValidationErrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.type\\\">\\n              {{formErrors.type}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.category}\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"category\\\">Category</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" placeholder=\\\"Category\\\" [(ngModel)]=\\\"category\\\" formControlName=\\\"category\\\" id=\\\"category\\\"\\n              class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.category\\\">\\n              {{formErrors.category}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.reading1}\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"reading1\\\">Reading#1</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" placeholder=\\\"Reading\\\" [(ngModel)]=\\\"reading1\\\" formControlName=\\\"reading1\\\" id=\\\"reading1\\\"\\n              class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.reading1\\\">\\n              {{formErrors.reading1}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.reading2}\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"reading2\\\">Reading#2</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" placeholder=\\\"Reading\\\" [(ngModel)]=\\\"reading2\\\" formControlName=\\\"reading2\\\" id=\\\"reading2\\\"\\n              class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.reading2\\\">\\n              {{formErrors.reading2}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.bp}\\\">\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"bp\\\">Blood Pressure</label>\\n          <div class=\\\"col-sm-8\\\">\\n            <input type=\\\"text\\\" placeholder=\\\"Blood Pressure\\\" [(ngModel)]=\\\"bp\\\" formControlName=\\\"bp\\\" id=\\\"bp\\\" class=\\\"form-control\\\"\\n              (blur)=\\\"logValidationErrors()\\\">\\n            <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.bp\\\">\\n              {{formErrors.bp}}\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.food_allergy}\\\">\\n          <label class=\\\"col-md-2 control-label\\\">Food Allergy</label>\\n          <div class=\\\"col-md-8\\\">\\n            <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"food_allergy\\\" formControlName=\\\"food_allergy\\\" value=\\\"no\\\" (blur)=\\\"logValidationErrors()\\\">No\\n            </label>\\n            <label class=\\\"radio-inline\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"food_allergy\\\" formControlName=\\\"food_allergy\\\" value=\\\"yes\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n            </label>\\n          </div>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.food_allergy\\\">\\n            {{formErrors.food_allergy}}\\n          </span>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.diabetic}\\\">\\n          <label class=\\\"col-md-2 control-label\\\">Diabetic</label>\\n          <div class=\\\"col-md-8\\\">\\n            <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"diabetic\\\" formControlName=\\\"diabetic\\\" value=\\\"no\\\" (blur)=\\\"logValidationErrors()\\\">No\\n            </label>\\n            <label class=\\\"radio-inline\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"diabetic\\\" formControlName=\\\"diabetic\\\" value=\\\"yes\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n            </label>\\n          </div>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.diabetic\\\">\\n            {{formErrors.diabetic}}\\n          </span>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.heart_disease}\\\">\\n          <label class=\\\"col-md-2 control-label\\\">Heart Disease</label>\\n          <div class=\\\"col-md-8\\\">\\n            <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"heart_disease\\\" formControlName=\\\"heart_disease\\\" value=\\\"no\\\" (blur)=\\\"logValidationErrors()\\\">No\\n            </label>\\n            <label class=\\\"radio-inline\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"heart_disease\\\" formControlName=\\\"heart_disease\\\" value=\\\"yes\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n            </label>\\n          </div>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.heart_disease\\\">\\n            {{formErrors.heart_disease}}\\n          </span>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.surgery}\\\">\\n          <label class=\\\"col-md-2 control-label\\\">Surgery</label>\\n          <div class=\\\"col-md-8\\\">\\n            <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"surgery\\\" formControlName=\\\"surgery\\\" value=\\\"no\\\" (blur)=\\\"logValidationErrors()\\\">No\\n            </label>\\n            <label class=\\\"radio-inline\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"surgery\\\" formControlName=\\\"surgery\\\" value=\\\"yes\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n            </label>\\n          </div>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.surgery\\\">\\n            {{formErrors.surgery}}\\n          </span>\\n        </div>\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.accident}\\\">\\n          <label class=\\\"col-md-2 control-label\\\">Accident</label>\\n          <div class=\\\"col-md-8\\\">\\n            <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"accident\\\" formControlName=\\\"accident\\\" value=\\\"no\\\" (blur)=\\\"logValidationErrors()\\\">No\\n            </label>\\n            <label class=\\\"radio-inline\\\">\\n              <input type=\\\"radio\\\" [(ngModel)]=\\\"accident\\\" formControlName=\\\"accident\\\" value=\\\"yes\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n            </label>\\n          </div>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.accident\\\">\\n            {{formErrors.accident}}\\n          </span>\\n        </div>\\n      </div>\\n      <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n      <div class=\\\"panel-footer text-center\\\">\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!addRecord.valid\\\">Add Record</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Records } from '../records';\nimport { RecordsService } from '../records.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-add-record',\n  templateUrl: './add-record.component.html',\n  styleUrls: ['./add-record.component.css']\n})\nexport class AddRecordComponent implements OnInit {\n\n  ID: any;\n  addRecord: FormGroup;\n\n  records: Records[];\n  record: Records;\n  patient_id: String;\n  date: String;\n  nurse_name: String;\n  type: String;\n  category: String\n  reading1: String;\n  reading2: String;\n  food_allergy: String;\n  bp: String;\n  diabetic: String;\n  heart_disease: String;\n  surgery: String;\n  accident: String;\n\n\n  validationMessages = {\n    'date': {\n      'required': 'Date is required.'\n    },\n    'nurse': {\n      'required': 'Nurse name is required.'\n    },\n    'type': {\n      'required': 'Type of test is required.'\n    },\n    'category': {\n      'required': 'Category of test is required.'\n    },\n    'reading1': {\n      'required': 'Atleast 1 reading is required.'\n    },\n    'reading2': {\n      'required': 'If no reading#2. Please put -(dash).'\n    },\n    'bp': {\n      'required': 'Blood Pressure is required.'\n    },\n    'food_allergy': {\n      'required': 'Please Specify Food Allergy.'\n    },\n    'diabetic': {\n      'required': 'Please Specify Diabetic.'\n    },\n    'heart_disease': {\n      'required': 'Please Specify Heart Disease'\n    },\n    'surgery': {\n      'required': 'Please Specify Surgery'\n    },\n    'accident': {\n      'required': 'Please Spcify Accident'\n    }\n  };\n\n  formErrors = {\n    'date': '',\n    'nurse': '',\n    'type': '',\n    'category': '',\n    'reading1': '',\n    'bp': '',\n    'food_allergy': '',\n    'diabetic': '',\n    'heart_disease': '',\n    'surgery': '',\n    'accident': ''\n  };\n\n\n  constructor(private fb: FormBuilder,\n    private recordService: RecordsService,\n    private router: Router,\n    private flashMessage: FlashMessagesService) { }\n\n\n  onRecordSubmit() {\n    const newRecord = {\n      patient_id: this.ID,\n      date: this.date,\n      nurse_name: this.nurse_name,\n      type: this.type,\n      category: this.category,\n      reading1: this.reading1,\n      reading2: this.reading2,\n      food_allergy: this.food_allergy,\n      bp: this.bp,\n      diabetic: this.diabetic,\n      heart_disease: this.heart_disease,\n      surgery: this.surgery,\n      accident: this.accident\n    }\n    this.recordService.addRecord(this.ID, newRecord).subscribe((record: any) => {\n      this.records = record;\n      this.flashMessage.show(\"Record added sucessfully\", { cssClass: 'alert-success text-center', timeout: 3000 });\n      this.router.navigate(['/records']);\n    })\n\n  }\n\n  ngOnInit() {\n\n    this.addRecord = this.fb.group({\n      date: ['', Validators.required],\n      nurse: ['', Validators.required],\n      type: ['', Validators.required],\n      category: ['', Validators.required],\n      reading1: ['', Validators.required],\n      reading2: ['', Validators.required],\n      bp: ['', Validators.required],\n      food_allergy: ['', Validators.required],\n      diabetic: ['', Validators.required],\n      heart_disease: ['', Validators.required],\n      surgery: ['', Validators.required],\n      accident: ['', Validators.required],\n    });\n\n    this.addRecord.valueChanges.subscribe((data) => {\n      this.logValidationErrors(this.addRecord);\n    })\n\n\n    this.ID = JSON.parse(localStorage.getItem(\"ID\"));\n  }\n\n  logValidationErrors(group: FormGroup = this.addRecord): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty)) {\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    })\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<div>\\n    <flash-messages></flash-messages>\\n    <router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { PatientsComponent } from './patients/patients.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PatientService } from './patient.service';\nimport { FlashMessagesModule } from 'angular2-flash-messages';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from './guards/auth.guard';\nimport { ViewPatientsComponent } from './view-patients/view-patients.component';\nimport { RecordsComponent } from './records/records.component';\nimport { RecordsService } from './records.service';\nimport { AddRecordComponent } from './add-record/add-record.component';\nimport { EditPatientComponent } from './edit-patient/edit-patient.component';\nimport { EditRecordComponent } from './edit-record/edit-record.component';\nimport { PatientFiterPipe } from './view-patients/patient-filter.pipe';\nimport { RecordFiterPipe } from './records/record-filter.pipe';\n\n\nconst appRoutes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'patient', component: PatientsComponent, canActivate: [AuthGuard] },\n  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },\n  { path: 'patients', component: ViewPatientsComponent, canActivate: [AuthGuard] },\n  { path: 'records', component: RecordsComponent, canActivate: [AuthGuard] },\n  { path: 'addRecord', component: AddRecordComponent, canActivate: [AuthGuard] },\n  { path: 'editPatient', component: EditPatientComponent, canActivate: [AuthGuard] },\n  { path: 'editRecord', component: EditRecordComponent, canActivate: [AuthGuard] }\n];\n@NgModule({\n  declarations: [\n    AppComponent,\n    PatientsComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    ProfileComponent,\n    DashboardComponent,\n    ViewPatientsComponent,\n    RecordsComponent,\n    AddRecordComponent,\n    EditPatientComponent,\n    EditRecordComponent,\n    PatientFiterPipe,\n    RecordFiterPipe\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    RouterModule.forRoot(appRoutes),\n    FlashMessagesModule.forRoot(),\n    ReactiveFormsModule\n  ],\n  providers: [PatientService, AuthService, AuthGuard, RecordsService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  authToken: any;\n  user: any;\n  URL = 'api/';\n  constructor(private http: HttpClient) { }\n\n  registerUser(user) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(`${this.URL}register`, user, {\n      headers: headers\n    });\n  }\n\n  authenticateUser(user) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(`${this.URL}authenticate`, user, {\n      headers: headers\n    });\n  }\n\n  getProfile() {\n    this.loadToken();\n    let headers = new HttpHeaders().set('Authorization', this.authToken);\n    return this.http.get(`${this.URL}profile`, {\n      headers: headers\n    });\n  }\n\n  loadToken() {\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n  storeUserData(token, user) {\n    localStorage.setItem('id_token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.authToken = token;\n    this.user = user;\n  }\n\n  logout() {\n    this.authToken = null;\n    this.user = null;\n    localStorage.clear();\n  }\n\n  loggedIn() {\n\n    const helper = new JwtHelperService();\n    return helper.isTokenExpired(localStorage.getItem('id_token'));\n\n  }\n}\n","module.exports = \"\"","module.exports = \"<br>\\n<div class=\\\"jumbotron text-center\\\">\\n  <h1>DMC PORTAL</h1>\\n  <p class=\\\"lead\\\">Please Choose One Of The Following Options!</p>\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary btn-lg btn-block\\\" [routerLink]=\\\"['/patients']\\\">View Patients</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-info btn-lg btn-block\\\" [routerLink]=\\\"['/patient']\\\">Add Patient</button>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\" *ngIf=\\\"patient\\\">\\n  <h2 class=\\\"page-header text-center\\\">Edit Patient</h2>\\n  <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n  <form [formGroup]=\\\"editPatientForm\\\" (submit)=\\\"editPatient()\\\">\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'is-invalid':formErrors.first_name}\\\">\\n      <label>First Name</label>\\n      <input type=\\\"text\\\" placeholder=\\\"First Name\\\" [(ngModel)]=\\\"patient.first_name\\\" formControlName=\\\"first_name\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.first_name\\\">\\n        {{formErrors.first_name}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.last_name}\\\">\\n      <label>Last Name</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Last Name\\\" [(ngModel)]=\\\"patient.last_name\\\" formControlName=\\\"last_name\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.last_name\\\">\\n        {{formErrors.last_name}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.email}\\\">\\n      <label>Email</label>\\n      <input type=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"patient.email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" value={{patient.email}} required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.email\\\">\\n        {{formErrors.email}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.DOB}\\\">\\n      <label>Date of Birth</label>\\n      <input type=\\\"date\\\" [(ngModel)]=\\\"patient.DOB\\\" formControlName=\\\"DOB\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        value={{patient.DOB}} required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.DOB\\\">\\n        {{formErrors.DOB}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.address}\\\">\\n      <label>Address</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Address\\\" [(ngModel)]=\\\"patient.address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.address\\\">\\n        {{formErrors.address}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.city}\\\">\\n      <label>City</label>\\n      <input type=\\\"text\\\" placeholder=\\\"City\\\" [(ngModel)]=\\\"patient.city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.city\\\">\\n        {{formErrors.city}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.province}\\\">\\n      <label>Province</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Province\\\" [(ngModel)]=\\\"patient.province\\\" formControlName=\\\"province\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.province\\\">\\n        {{formErrors.province}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.postal_code}\\\">\\n      <label>Postal Code</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Postal Code\\\" [(ngModel)]=\\\"patient.postal_code\\\" formControlName=\\\"postal_code\\\"\\n        class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.postal_code\\\">\\n        {{formErrors.postal_code}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.phone}\\\">\\n      <label>Phone Number</label>\\n      <input type=\\\"number\\\" placeholder=\\\"Phone Number\\\" [(ngModel)]=\\\"patient.phone\\\" formControlName=\\\"phone\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.phone\\\">\\n        {{formErrors.phone}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.department}\\\">\\n      <label>Department</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Department\\\" [(ngModel)]=\\\"patient.department\\\" formControlName=\\\"department\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.department\\\">\\n        {{formErrors.department}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.doctor}\\\">\\n      <label>Doctor</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Doctor's Name\\\" [(ngModel)]=\\\"patient.doctor\\\" formControlName=\\\"doctor\\\" class=\\\"form-control\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.doctor\\\">\\n        {{formErrors.doctor}}\\n      </span>\\n    </div>\\n    <div class=\\\"text-center\\\">\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary \\\" [disabled]=\\\"!editPatientForm.valid\\\">Update Patient</button>\\n    </div>\\n  </form>\\n</div>\\n<hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\"","import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../patient.service';\nimport { Patient } from '../Patient';\nimport { RecordsService } from '../records.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-edit-patient',\n  templateUrl: './edit-patient.component.html',\n  styleUrls: ['./edit-patient.component.css']\n})\nexport class EditPatientComponent implements OnInit {\n\n  patient: Patient;\n  ID: any;\n  editPatientForm: FormGroup;\n\n  formErrors = {\n    'first_name': '',\n    'last_name': '',\n    'DOB': '',\n    'email': '',\n    'address': '',\n    'city': '',\n    'province': '',\n    'postal_code': '',\n    'phone': '',\n    'department': '',\n    'doctor': '',\n  }\n\n  validationMessages = {\n    'first_name': {\n      'required': 'First Name is Required'\n    },\n    'last_name': {\n      'required': 'Last Name is Required'\n    },\n    'DOB': {\n      'required': 'Date Of Birth is Required'\n    },\n    'email': {\n      'required': 'Email is Required',\n      'email': 'Please Provide Correct Email'\n    },\n    'address': {\n      'required': 'Address is Required'\n    },\n    'city': {\n      'required': 'City is Required'\n    },\n    'province': {\n      'required': 'Province is Required'\n    },\n    'postal_code': {\n      'required': 'Postal Code is Required'\n    },\n    'phone': {\n      'required': 'Phone is Required'\n    },\n    'department': {\n      'required': 'Department is Required'\n    },\n    'doctor': {\n      'required': 'Doctors Name is Required'\n    },\n\n  }\n\n  constructor(private patientService: PatientService,\n    private recordService: RecordsService,\n    private fb: FormBuilder,\n    private flashMessage: FlashMessagesService,\n    private router: Router) { }\n\n\n\n  editPatient() {\n    const patient = {\n      first_name: this.patient.first_name,\n      last_name: this.patient.last_name,\n      DOB: this.patient.DOB,\n      email: this.patient.email,\n      address: this.patient.address,\n      city: this.patient.city,\n      province: this.patient.province,\n      postal_code: this.patient.postal_code,\n      phone: this.patient.phone,\n      department: this.patient.department,\n      doctor: this.patient.doctor\n    }\n    this.patientService.updatePatient(this.ID, patient).subscribe((patient: any) => {\n      this.flashMessage.show(patient.msg, { cssClass: 'alert-success text-center', timeout: 3000 })\n      this.router.navigate(['/patients'])\n    })\n  }\n  ngOnInit() {\n    this.patientService.apiData$.subscribe(patient => {\n\n      if (patient) {\n        this.patient = patient;\n        this.recordService.saveID(patient._id);\n      }\n\n    });\n\n    this.ID = JSON.parse(localStorage.getItem(\"ID\"));\n\n    this.patientService.getSinglePatient(this.ID).subscribe((data: any) => {\n      this.patient = data;\n    })\n\n    this.editPatientForm = this.fb.group({\n      first_name: ['', Validators.required],\n      last_name: ['', Validators.required],\n      DOB: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      province: ['', Validators.required],\n      postal_code: ['', Validators.required],\n      phone: ['', Validators.required],\n      department: ['', Validators.required],\n      doctor: ['', Validators.required]\n    });\n\n    this.editPatientForm.valueChanges.subscribe((data) => {\n      this.logValidationErrors(this.editPatientForm);\n    })\n\n  }\n\n  logValidationErrors(group: FormGroup = this.editPatientForm): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty)) {\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    })\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2 class=\\\"page-header text-center\\\">Edit Record</h2>\\n  <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n  <form [formGroup]=\\\"editRecord\\\" class=\\\"form-horizontal\\\" (submit)=\\\"onRecordUpdate()\\\">\\n    <div class=\\\"panel-body\\\">\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.date}\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"date\\\">Date</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"date\\\" [(ngModel)]=\\\"record.date\\\" name=\\\"date\\\" placeholder=\\\"YYYY-MM-DD\\\" formControlName=\\\"date\\\" id=\\\"date\\\"\\n            class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.date\\\">\\n            {{formErrors.date}}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.nurse}\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"nurse\\\">Nurse</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"record.nurse_name\\\" formControlName=\\\"nurse\\\" id=\\\"nurse\\\"\\n            class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.nurse\\\">\\n            {{formErrors.nurse}}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.type}\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"type\\\">Type</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Type\\\" [(ngModel)]=\\\"record.type\\\" formControlName=\\\"type\\\" id=\\\"type\\\" class=\\\"form-control\\\"\\n            (blur)=\\\"logValidationErrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.type\\\">\\n            {{formErrors.type}}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.category}\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"category\\\">Category</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Category\\\" [(ngModel)]=\\\"record.category\\\" formControlName=\\\"category\\\" id=\\\"category\\\"\\n            class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.category\\\">\\n            {{formErrors.category}}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.reading1}\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"reading1\\\">Reading#1</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Reading\\\" [(ngModel)]=\\\"record.reading1\\\" formControlName=\\\"reading1\\\" id=\\\"reading1\\\"\\n            class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.reading1\\\">\\n            {{formErrors.reading1}}\\n          </span>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.reading1}\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"reading2\\\">Reading#2</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Reading\\\" [(ngModel)]=\\\"record.reading2\\\" formControlName=\\\"reading2\\\" id=\\\"reading2\\\"\\n            class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.reading2\\\">\\n            {{formErrors.reading2}}\\n          </span>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.bp}\\\">\\n        <label class=\\\"col-sm-2 control-label\\\" for=\\\"bp\\\">Blood Pressure</label>\\n        <div class=\\\"col-sm-8\\\">\\n          <input type=\\\"text\\\" placeholder=\\\"Blood Pressure\\\" [(ngModel)]=\\\"record.bp\\\" formControlName=\\\"bp\\\" id=\\\"bp\\\" class=\\\"form-control\\\"\\n            (blur)=\\\"logValidationErrors()\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.bp\\\">\\n            {{formErrors.bp}}\\n          </span>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.food_allergy}\\\">\\n        <label class=\\\"col-md-2 control-label\\\">Food Allergy</label>\\n        <div class=\\\"col-md-8\\\">\\n          <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.food_allergy\\\" formControlName=\\\"food_allergy\\\" value=\\\"NO\\\" (blur)=\\\"logValidationErrors()\\\">No\\n          </label>\\n          <label class=\\\"radio-inline\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.food_allergy\\\" formControlName=\\\"food_allergy\\\" value=\\\"YES\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n          </label>\\n        </div>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.food_allergy\\\">\\n          {{formErrors.food_allergy}}\\n        </span>\\n      </div>\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.diabetic}\\\">\\n        <label class=\\\"col-md-2 control-label\\\">Diabetic</label>\\n        <div class=\\\"col-md-8\\\">\\n          <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.diabetic\\\" formControlName=\\\"diabetic\\\" value=\\\"NO\\\" (blur)=\\\"logValidationErrors()\\\">No\\n          </label>\\n          <label class=\\\"radio-inline\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.diabetic\\\" formControlName=\\\"diabetic\\\" value=\\\"YES\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n          </label>\\n        </div>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.diabetic\\\">\\n          {{formErrors.diabetic}}\\n        </span>\\n      </div>\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.heart_disease}\\\">\\n        <label class=\\\"col-md-2 control-label\\\">Heart Disease</label>\\n        <div class=\\\"col-md-8\\\">\\n          <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.heart_disease\\\" formControlName=\\\"heart_disease\\\" value=\\\"NO\\\" (blur)=\\\"logValidationErrors()\\\">No\\n          </label>\\n          <label class=\\\"radio-inline\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.heart_disease\\\" formControlName=\\\"heart_disease\\\" value=\\\"YES\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n          </label>\\n        </div>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.heart_disease\\\">\\n          {{formErrors.heart_disease}}\\n        </span>\\n      </div>\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.surgery}\\\">\\n        <label class=\\\"col-md-2 control-label\\\">Surgery</label>\\n        <div class=\\\"col-md-8\\\">\\n          <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.surgery\\\" formControlName=\\\"surgery\\\" value=\\\"NO\\\" (blur)=\\\"logValidationErrors()\\\">No\\n          </label>\\n          <label class=\\\"radio-inline\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.surgery\\\" formControlName=\\\"surgery\\\" value=\\\"YES\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n          </label>\\n        </div>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.surgery\\\">\\n          {{formErrors.surgery}}\\n        </span>\\n      </div>\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.accident}\\\">\\n        <label class=\\\"col-md-2 control-label\\\">Accident</label>\\n        <div class=\\\"col-md-8\\\">\\n          <label class=\\\"radio-inline\\\" style=\\\"margin-right: 10px\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.accident\\\" formControlName=\\\"accident\\\" value=\\\"NO\\\" (blur)=\\\"logValidationErrors()\\\">No\\n          </label>\\n          <label class=\\\"radio-inline\\\">\\n            <input type=\\\"radio\\\" [(ngModel)]=\\\"record.accident\\\" formControlName=\\\"accident\\\" value=\\\"YES\\\" (blur)=\\\"logValidationErrors()\\\">Yes\\n          </label>\\n        </div>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.accident\\\">\\n          {{formErrors.accident}}\\n        </span>\\n      </div>\\n    </div>\\n    <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n    <div class=\\\"panel-footer text-center\\\">\\n      <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!editRecord.valid\\\">Update Record</button>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { RecordsService } from '../records.service';\nimport { Records } from '../records';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-edit-record',\n  templateUrl: './edit-record.component.html',\n  styleUrls: ['./edit-record.component.css']\n})\nexport class EditRecordComponent implements OnInit {\n\n  record: Records;\n  editRecord: FormGroup;\n  ID: any;\n\n  constructor(private recordService: RecordsService,\n    private router: Router,\n    private flashMessage: FlashMessagesService,\n    private fb: FormBuilder) { }\n\n\n  validationMessages = {\n    'date': {\n      'required': 'Date is required.'\n    },\n    'nurse': {\n      'required': 'Nurse name is required.'\n    },\n    'type': {\n      'required': 'Type of test is required.'\n    },\n    'category': {\n      'required': 'Category of test is required.'\n    },\n    'reading1': {\n      'required': 'Atleast 1 reading is required.'\n    },\n    'reading2': {\n      'required': 'If no reading#2. Please put -(dash).'\n    },\n    'bp': {\n      'required': 'Blood Pressure is required.'\n    },\n    'food_allergy': {\n      'required': 'Please Specify Food Allergy.'\n    },\n    'diabetic': {\n      'required': 'Please Specify Diabetic.'\n    },\n    'heart_disease': {\n      'required': 'Please Specify Heart Disease'\n    },\n    'surgery': {\n      'required': 'Please Specify Surgery'\n    },\n    'accident': {\n      'required': 'Please Spcify Accident'\n    }\n  };\n\n  formErrors = {\n    'date': '',\n    'nurse': '',\n    'type': '',\n    'category': '',\n    'reading1': '',\n    'bp': '',\n    'food_allergy': '',\n    'diabetic': '',\n    'heart_disease': '',\n    'surgery': '',\n    'accident': ''\n  };\n\n  onRecordUpdate() {\n    const Urecord = {\n      patient_id: this.record.patient_id,\n      date: this.record.date,\n      nurse_name: this.record.nurse_name,\n      type: this.record.type,\n      category: this.record.category,\n      reading1: this.record.reading1,\n      reading2: this.record.reading2,\n      food_allergy: this.record.food_allergy,\n      bp: this.record.bp,\n      diabetic: this.record.diabetic,\n      heart_disease: this.record.heart_disease,\n      surgery: this.record.surgery,\n      accident: this.record.accident\n    }\n    this.recordService.editRecord(this.record.patient_id, this.record._id, Urecord).subscribe((record: any) => {\n      this.flashMessage.show(record.msg, { cssClass: 'alert-success text-center', timeout: 3000 })\n      this.router.navigate(['/records'])\n    })\n  }\n\n  ngOnInit() {\n    this.recordService.apiData$.subscribe(record => {\n      if (record) {\n        this.record = record;\n      }\n    })\n\n    this.ID = localStorage.getItem('ID');\n\n    this.editRecord = this.fb.group({\n      date: ['', Validators.required],\n      nurse: ['', Validators.required],\n      type: ['', Validators.required],\n      category: ['', Validators.required],\n      reading1: ['', Validators.required],\n      reading2: ['', Validators.required],\n      bp: ['', Validators.required],\n      food_allergy: ['', Validators.required],\n      diabetic: ['', Validators.required],\n      heart_disease: ['', Validators.required],\n      surgery: ['', Validators.required],\n      accident: ['', Validators.required],\n    });\n\n    this.editRecord.valueChanges.subscribe((data) => {\n      this.logValidationErrors(this.editRecord);\n    })\n  }\n\n  logValidationErrors(group: FormGroup = this.editRecord): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty)) {\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    })\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(private authService: AuthService, private router: Router) { }\r\n\r\n    canActivate() {\r\n        if (!this.authService.loggedIn()) {\r\n            return true;\r\n        } else {\r\n            this.router.navigate(['/login']);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron text-center\\\">\\n  <h1>DMC Home</h1>\\n  <p class=\\\"lead\\\">Please Choose One Of The Following Options</p>\\n</div>\\n<div class=\\\"btn-toolbar\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-outline-primary btn-lg btn-block\\\" [routerLink]=\\\"['/login']\\\">Login</button>\\n  <button type=\\\"button\\\" class=\\\"btn btn-outline-info btn-lg btn-block\\\" [routerLink]=\\\"['/register']\\\">Register</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2 class=\\\"page-header text-center\\\">Login</h2>\\n  <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n  <form [formGroup]=\\\"login\\\" (submit)=\\\"onLoginSubmit()\\\">\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.username}\\\">\\n      <label>Username</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"username\\\" formControlName=\\\"username\\\" (blur)=\\\"logValidationErrors()\\\" class=\\\"form-control\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.username\\\">\\n        {{formErrors.username}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.username}\\\">\\n      <label>Password</label>\\n      <input type=\\\"password\\\" [(ngModel)]=\\\"password\\\" formControlName=\\\"password\\\" (blur)=\\\"logValidationErrors()\\\" class=\\\"form-control\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.password\\\">\\n        {{formErrors.password}}\\n      </span>\\n    </div>\\n    <div class=\\\"text-center\\\">\\n      <input type=\\\"submit\\\" class=\\\"btn btn-outline-primary btn-lg\\\" [disabled]=\\\"!login.valid\\\" value=\\\"Login\\\">\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  username: String;\n  password: String;\n\n  login: FormGroup\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService,\n    private fb: FormBuilder) { }\n\n  ngOnInit() {\n    this.login = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    })\n  }\n\n\n  onLoginSubmit() {\n    const user = {\n      username: this.username,\n      password: this.password\n    }\n\n    this.authService.authenticateUser(user).subscribe((data: any) => {\n      if (data.success) {\n        this.authService.storeUserData(data.token, data.user)\n        this.flashMessage.show(`Welcome ${data.user.name}. Don't Forget to LogOut`, { cssClass: 'alert-success text-center', timeout: 3000 });\n        this.router.navigate(['/dashboard']);\n\n      }\n      else {\n        this.flashMessage.show(data.msg, { cssClass: 'alert-danger text-center', timeout: 3000 });\n        this.router.navigate(['/login']);\n      }\n\n    })\n  }\n\n  formErrors = {\n    'username': '',\n    'password': ''\n  }\n\n  validationMessages = {\n    'username': {\n      'required': 'Username is required.'\n    },\n    'password': {\n      'required': 'Password is required.'\n    }\n  }\n\n  logValidationErrors(group: FormGroup = this.login): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty)) {\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    })\n  }\n}\n","module.exports = \"\"","module.exports = \"<div>\\n    <nav class=\\\"navbar navbar-expand-sm navbar-dark bg-dark\\\">\\n\\n        <a class=\\\"navbar-brand\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\" (click)=\\\"onHomeClick()\\\">Doctors\\n            Medical College</a>\\n\\n        <ul class=\\\"navbar-nav ml-auto\\\">\\n\\n            <li class=\\\"nav-item\\\">\\n                <a *ngIf=\\\"authService.loggedIn()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\"\\n                    class=\\\"btn btn-secondary navbar-btn\\\" [routerLink]=\\\"['/login']\\\">Login</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a *ngIf=\\\"authService.loggedIn()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\"\\n                    class=\\\"btn btn-secondary navbar-btn\\\" [routerLink]=\\\"['/register']\\\">Register</a>\\n            </li>\\n\\n            <li class=\\\"navbar-item\\\">\\n                <a *ngIf=\\\"!authService.loggedIn()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\"\\n                    class=\\\"btn btn-outline-info navbar-btn\\\" [routerLink]=\\\"['/patients']\\\">Patients</a>\\n            </li>\\n            <li class=\\\"navbar-item\\\">\\n                <a *ngIf=\\\"!authService.loggedIn()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\"\\n                    class=\\\"btn btn-outline-info navbar-btn\\\" [routerLink]=\\\"['/profile']\\\">Profile</a>\\n            </li>\\n            <li class=\\\"navbar-item\\\">\\n                <a *ngIf=\\\"!authService.loggedIn()\\\" [routerLinkActive]=\\\"['active']\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\"\\n                    class=\\\"btn btn-outline-info navbar-btn\\\" (click)=\\\"onLogoutClick()\\\" [routerLink]=\\\"['/login']\\\">Logout</a>\\n            </li>\\n\\n        </ul>\\n    </nav>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n  user: any\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService) { }\n\n  ngOnInit() {\n    this.authService.getProfile().subscribe((profile: any) => {\n      this.user = profile.user\n    },\n      err => {\n        return false;\n      }\n    )\n  }\n\n  onLogoutClick() {\n    this.authService.logout();\n    this.user = null;\n    this.flashMessage.show(\"Logged Out Sucessfully\", { cssClass: 'alert-success text-center', timeout: 3000 })\n\n  }\n\n  onHomeClick() {\n    if (!this.authService.loggedIn()) {\n      this.router.navigate(['/dashboard']);\n      return true;\n\n    }\n    else {\n      this.router.navigate(['']);\n      return false;\n    }\n  }\n}\n","import { Injectable, NgModule } from '@angular/core';\nimport { Patient } from './Patient';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject'\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\n\nexport class PatientService {\n\n  authToken: any;\n  private apiData = new BehaviorSubject<Patient>(null);\n  public apiData$ = this.apiData.asObservable();\n\n  URL = 'api/';\n\n  constructor(private http: HttpClient) { }\n\n  //Retriving Patients\n\n  getPatients() {\n    this.loadToken();\n    let headers = new HttpHeaders().set('Authorization', this.authToken).set\n      ('Content-Type', 'application/json');\n    return this.http.get(`${this.URL}patients`, { headers: headers });\n  }\n\n  //Add Patient\n\n  addPatient(newPatient) {\n    this.loadToken();\n    var headers = new HttpHeaders({ 'Content-Type': 'application/json' }).set('Authorization', this.authToken);\n    return this.http.post(`${this.URL}patients`, newPatient, { headers: headers });\n\n  }\n\n  //Delete Patient\n  deletePatient(id) {\n    this.loadToken();\n    let headers = new HttpHeaders().set('Authorization', this.authToken);\n    return this.http.delete(`${this.URL}patient/${id}`, { headers: headers });\n  }\n\n  getSinglePatient(id) {\n    this.loadToken();\n    let headers = new HttpHeaders().set('Authorization', this.authToken);\n    return this.http.get(`${this.URL}patient/${id}`, { headers: headers });\n  }\n\n  //Update Patient\n  updatePatient(id, Patient) {\n    this.loadToken();\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json' }).set('Authorization', this.authToken);\n    return this.http.put(`${this.URL}patient/${id}`, Patient, { headers: headers });\n  }\n\n\n  setData(data) {\n    this.apiData.next(data);\n  }\n\n\n  loadToken() {\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2 class=\\\"page-header text-center\\\">Add Patient</h2>\\n  <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n\\n  <form [formGroup]=\\\"addPatientForm\\\" (submit)=\\\"addPatient()\\\" novalidate>\\n    <div class=\\\"form-group has-error\\\" [ngClass]=\\\"{'has-error':formErrors.first_name}\\\">\\n      <label>First Name</label>\\n      <input type=\\\"text\\\" placeholder=\\\"First Name\\\" [(ngModel)]=\\\"first_name\\\" formControlName=\\\"first_name\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.first_name\\\">\\n        {{formErrors.first_name}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.last_name}\\\">\\n      <label>Last Name</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Last Name\\\" [(ngModel)]=\\\"last_name\\\" formControlName=\\\"last_name\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.last_name\\\">\\n        {{formErrors.last_name}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.email}\\\">\\n      <label>Email</label>\\n      <input type=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.email\\\">\\n        {{formErrors.email}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.DOB}\\\">\\n      <label>Date of Birth</label>\\n      <input type=\\\"date\\\" [(ngModel)]=\\\"DOB\\\" formControlName=\\\"DOB\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.DOB\\\">\\n        {{formErrors.DOB}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.address}\\\">\\n      <label>Address</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Address\\\" [(ngModel)]=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.address\\\">\\n        {{formErrors.address}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.city}\\\">\\n      <label>City</label>\\n      <input type=\\\"text\\\" placeholder=\\\"City\\\" [(ngModel)]=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.city\\\">\\n        {{formErrors.city}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.province}\\\">\\n      <label>Province</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Province\\\" [(ngModel)]=\\\"province\\\" formControlName=\\\"province\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.province\\\">\\n        {{formErrors.province}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.postal_code}\\\">\\n      <label>Postal Code</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Postal Code\\\" [(ngModel)]=\\\"postal_code\\\" formControlName=\\\"postal_code\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.postal_code\\\">\\n        {{formErrors.postal_code}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.phone}\\\">\\n      <label>Phone Number</label>\\n      <input type=\\\"number\\\" placeholder=\\\"Phone Number\\\" [(ngModel)]=\\\"phone\\\" formControlName=\\\"phone\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.phone\\\">\\n        {{formErrors.phone}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.department}\\\">\\n      <label>Department</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Department\\\" [(ngModel)]=\\\"department\\\" formControlName=\\\"department\\\" class=\\\"form-control\\\"\\n        (blur)=\\\"logValidationErrors()\\\" required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.department\\\">\\n        {{formErrors.department}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.doctor}\\\">\\n      <label>Doctor</label>\\n      <input type=\\\"text\\\" placeholder=\\\"Doctor's Name\\\" [(ngModel)]=\\\"doctor\\\" formControlName=\\\"doctor\\\" class=\\\"form-control\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.doctor\\\">\\n        {{formErrors.doctor}}\\n      </span>\\n    </div>\\n\\n    <div class=\\\"text-center\\\">\\n      <input type=\\\"submit\\\" class=\\\"btn btn-secondary \\\" [disabled]=\\\"!addPatientForm.valid\\\" value=\\\"Add Patient\\\">\\n    </div>\\n  </form>\\n\\n</div>\\n\\n<hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\"","import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../patient.service';\nimport { Patient } from '../Patient';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { Router } from '@angular/router'\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-patients',\n  templateUrl: './patients.component.html',\n  styleUrls: ['./patients.component.css'],\n})\nexport class PatientsComponent implements OnInit {\n\n  patients: Patient[];\n  patient: Patient;\n  first_name: String;\n  last_name: String;\n  DOB: String;\n  email: String;\n  address: String;\n  city: String;\n  province: String;\n  postal_code: String;\n  phone: String;\n  department: String;\n  doctor: String\n\n  addPatientForm: FormGroup;\n\n\n  formErrors = {\n    'first_name': '',\n    'last_name': '',\n    'DOB': '',\n    'email': '',\n    'address': '',\n    'city': '',\n    'province': '',\n    'postal_code': '',\n    'phone': '',\n    'department': '',\n    'doctor': '',\n  }\n\n  validationMessages = {\n    'first_name': {\n      'required': 'First Name is Required'\n    },\n    'last_name': {\n      'required': 'Last Name is Required'\n    },\n    'DOB': {\n      'required': 'Date Of Birth is Required'\n    },\n    'email': {\n      'required': 'Email is Required',\n      'email': 'Please Provide Correct Email'\n    },\n    'address': {\n      'required': 'Address is Required'\n    },\n    'city': {\n      'required': 'City is Required'\n    },\n    'province': {\n      'required': 'Province is Required'\n    },\n    'postal_code': {\n      'required': 'Postal Code is Required'\n    },\n    'phone': {\n      'required': 'Phone is Required'\n    },\n    'department': {\n      'required': 'Department is Required'\n    },\n    'doctor': {\n      'required': 'Doctors Name is Required'\n    },\n\n  }\n\n  constructor\n    (\n    private patientService: PatientService,\n    private flashMessage: FlashMessagesService,\n    private router: Router,\n    private fb: FormBuilder\n    ) { }\n\n\n\n\n  addPatient() {\n    const newPatient = {\n      first_name: this.first_name,\n      last_name: this.last_name,\n      DOB: this.DOB,\n      email: this.email,\n      address: this.address,\n      city: this.city,\n      province: this.province,\n      postal_code: this.postal_code,\n      phone: this.phone,\n      department: this.department,\n      doctor: this.doctor\n\n    }\n\n    this.patientService.addPatient(newPatient).subscribe((patient: any) => {\n      this.patients = patient;\n      this.flashMessage.show(\"Patient Sucessfully added\", { cssClass: 'alert-success text-center', timeout: 3000 });\n      this.router.navigate(['/dashboard']);\n    });\n\n\n\n  }\n\n\n  ngOnInit() {\n\n    this.addPatientForm = this.fb.group({\n      first_name: ['', Validators.required],\n      last_name: ['', Validators.required],\n      DOB: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      address: ['', Validators.required],\n      city: ['', Validators.required],\n      province: ['', Validators.required],\n      postal_code: ['', Validators.required],\n      phone: ['', Validators.required],\n      department: ['', Validators.required],\n      doctor: ['', Validators.required]\n    });\n\n    this.addPatientForm.valueChanges.subscribe((data) => {\n      this.logValidationErrors(this.addPatientForm);\n    })\n  }\n\n  logValidationErrors(group: FormGroup = this.addPatientForm): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty)) {\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    })\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"user\\\">\\n  <h2 class=\\\"page-header text-center\\\">{{user.name}}</h2>\\n  <ul class=\\\"list-group\\\">\\n    <li class=\\\"list-group-item\\\">Username: {{user.username}}</li>\\n    <li class=\\\"list-group-item\\\">Email: {{user.email}}</li>\\n  </ul>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport{AuthService} from '../auth.service';\nimport{Router} from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\nuser:Object\n  constructor(\n    private authService:AuthService,\n    private router:Router\n  ) { }\n\n  ngOnInit() {\n    this.authService.getProfile().subscribe((profile:any)=>{\n      this.user=profile.user\n    },\n    err=>{\n      console.log(err);\n      return false;\n    }\n    )\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Records } from './records';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecordsService {\n\n  constructor(private http: HttpClient) { }\n\n  authToken: any;\n  private apiData = new BehaviorSubject<Records>(null);\n  public apiData$ = this.apiData.asObservable();\n\n  URL = 'api/patient/';\n\n\n  loadToken() {\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n  saveID(id) {\n    localStorage.removeItem(\"ID\");\n    localStorage.setItem(\"ID\", JSON.stringify(id));\n  }\n\n  getRecords(id) {\n    this.loadToken();\n    let headers = new HttpHeaders().set('Authorization', this.authToken);\n    return this.http.get(`${this.URL}${id}/records`, { headers: headers });\n  }\n\n  addRecord(id, newRecord) {\n    this.loadToken();\n    var headers = new HttpHeaders({ 'Content-Type': 'application/json' }).set('Authorization', this.authToken);\n    return this.http.post(`${this.URL}${id}/records`, newRecord, { headers: headers });\n\n  }\n\n  deleteRecord(pid, id) {\n    this.loadToken();\n    let headers = new HttpHeaders().set('Authorization', this.authToken);\n    return this.http.delete(`${this.URL}${pid}/record/${id}`, { headers: headers });\n  }\n\n  getSingleRecord(pid, id) {\n    this.loadToken();\n    let headers = new HttpHeaders().set('Authorization', this.authToken);\n    return this.http.get(`${this.URL}${pid}/record/${id}`, { headers: headers });\n  }\n\n  editRecord(pid, id, record) {\n    this.loadToken();\n    var headers = new HttpHeaders({ 'Content-Type': 'application/json' }).set('Authorization', this.authToken);\n    return this.http.put(`${this.URL}${pid}/record/${id}`, record, { headers: headers });\n  }\n\n  setData(data) {\n    this.apiData.next(data);\n  }\n\n}\n","import { PipeTransform, Pipe } from '@angular/core';\r\nimport { Records } from '../records';\r\n\r\n@Pipe({\r\n    name: 'recordFilter'\r\n})\r\nexport class RecordFiterPipe implements PipeTransform {\r\n    transform(records: Records[], searchRecord: string): Records[] {\r\n        if (!records || !searchRecord) {\r\n            return records;\r\n        }\r\n        return records.filter(patient =>\r\n            patient.date.indexOf(searchRecord) !== -1);\r\n    }\r\n\r\n}","module.exports = \"\"","module.exports = \"<div>\\n  <h2 class=\\\"page-header text-center\\\">Records For Patient</h2>\\n</div>\\n<div class=\\\"container\\\">\\n  <div class=\\\"column\\\">\\n    <div class=\\\"text-right\\\">\\n      <input type=\\\"date\\\" [(ngModel)]=\\\"searchRecord\\\" placeholder=\\\"Search By Date\\\" width=\\\"300px\\\">\\n    </div>\\n    <table class=\\\"table table-bordered table-hover table-dark\\\">\\n      <thead>\\n        <tr>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\" width=\\\"10%\\\">Date</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Nurse</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Type</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Category</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Reading#1</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Reading#2</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Blood Pressure</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Food Allergy</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Diabetic</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Heart Disease</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Surgery</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Accident</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Operations</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let record of records | recordFilter:searchRecord\\\">\\n          <th scope=\\\"row\\\">{{record.date}}</th>\\n          <td>{{record.nurse_name}}</td>\\n          <td>{{record.type}}</td>\\n          <td>{{record.category}}</td>\\n          <td>{{record.reading1}}</td>\\n          <td>{{record.reading2}}</td>\\n          <td>{{record.bp}}</td>\\n          <td>{{record.food_allergy}}</td>\\n          <td>{{record.diabetic}}</td>\\n          <td>{{record.heart_disease}}</td>\\n          <td>{{record.surgery}}</td>\\n          <td>{{record.accident}}</td>\\n          <td>\\n            <div class=\\\"btn-toolbar\\\">\\n              <button style=\\\"width:100%\\\" class=\\\"btn btn-outline-info\\\" (click)=\\\"editRecord(ID,record._id)\\\">Edit</button>\\n            </div>\\n            <div class=\\\"btn-toolbar\\\">\\n              <button style=\\\"width:100%\\\" class=\\\"btn btn-outline-danger\\\" (click)=\\\"deleteRecord(ID,record._id)\\\">Delete</button>\\n            </div>\\n\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n    <button class=\\\"btn btn-outline-success btn-lg btn-block\\\" (click)=\\\"redirect()\\\">Add Record</button>\\n  </div>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Patient } from '../Patient';\nimport { PatientService } from '../patient.service';\nimport { RecordsService } from '../records.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { Router } from '@angular/router';\nimport { Records } from '../records';\n\n@Component({\n  selector: 'app-records',\n  templateUrl: './records.component.html',\n  styleUrls: ['./records.component.css']\n\n})\nexport class RecordsComponent implements OnInit {\n\n  patient: Patient;\n  records: Records[];\n  record: Records;\n  ID: any;\n  PatientName: any;\n\n  searchRecord: string;\n\n  constructor(private patientService: PatientService,\n    private recordService: RecordsService,\n    private flashMessage: FlashMessagesService,\n    private router: Router) { }\n\n  //Delete Record\n  deleteRecord(pid: any, id: any) {\n    var records = this.records;\n    if (window.confirm(\"Are you sure you want to delete this Record?\")) {\n      this.recordService.deleteRecord(pid, id).subscribe((data: any) => {\n        if (data.n == 1) {\n          for (var i = 0; i < records.length; i++) {\n            if (records[i]._id == id) {\n              records.splice(i, 1)\n            }\n          }\n          this.flashMessage.show('Deleted Sucessfully', { cssClass: 'alert-success text-center', timeout: 3000 });\n        }\n      });\n    }\n  }\n\n  editRecord(pid: any, id: any) {\n    this.recordService.getSingleRecord(pid, id).subscribe((record: any) => {\n      this.records = record;\n      this.recordService.setData(record);\n      this.router.navigate(['/editRecord']);\n    })\n\n  }\n  redirect() {\n    this.router.navigate(['/addRecord']);\n  }\n\n\n  ngOnInit() {\n    //Get Patient Data from view-patient component\n    this.patientService.apiData$.subscribe(patient => {\n\n      if (patient) {\n        this.patient = patient;\n        this.recordService.saveID(patient._id);\n      }\n\n    });\n\n    this.ID = JSON.parse(localStorage.getItem(\"ID\"));\n\n\n    //Get all records \n    this.recordService.getRecords(this.ID).subscribe((records: any) => {\n      this.records = records;\n    })\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2 class=\\\"page-header text-center\\\">Register</h2>\\n  <hr style=\\\"border: solid #ddd; border-width: 1px 0 0; clear: both; margin: 22px 0 21px; height: 0;\\\">\\n  <form [formGroup]=\\\"register\\\" (submit)=\\\"onRegisterSubmit()\\\">\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.name}\\\">\\n      <label>Full Name</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.name\\\">\\n        {{formErrors.name}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.email}\\\">\\n      <label>Email</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.email\\\">\\n        {{formErrors.email}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.username}\\\">\\n      <label>Username</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"username\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.username\\\">\\n        {{formErrors.username}}\\n      </span>\\n    </div>\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{'has-error':formErrors.password}\\\">\\n      <label>Password</label>\\n      <input type=\\\"password\\\" [(ngModel)]=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" (blur)=\\\"logValidationErrors()\\\"\\n        required>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"formErrors.password\\\">\\n        {{formErrors.password}}\\n      </span>\\n    </div>\\n    <div class=\\\"text-center\\\">\\n      <input type=\\\"submit\\\" class=\\\"btn btn-outline-primary btn-lg\\\" [disabled]=\\\"!register.valid\\\" value=\\\"Register\\\">\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\n\n\nexport class RegisterComponent implements OnInit {\n\n  name: String;\n  username: String;\n  email: String;\n  password: String;\n\n  register: FormGroup\n  constructor(\n    private flashMessage: FlashMessagesService,\n    private authService: AuthService,\n    private router: Router,\n    private fb: FormBuilder) { }\n\n  ngOnInit() {\n    this.register = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n    })\n  }\n\n  formErrors = {\n    'name': '',\n    'email': '',\n    'username': '',\n    'password': ''\n  };\n\n  validationMessages = {\n    'name': {\n      'required': 'Name is required.'\n    },\n    'email': {\n      'required': 'Email is required.',\n      'email': 'Please provide Valid Email'\n    },\n    'username': {\n      'required': 'Username is required.'\n    },\n    'password': {\n      'required': 'Password is required.'\n    }\n  }\n\n  onRegisterSubmit() {\n    const user = {\n      name: this.name,\n      email: this.email,\n      username: this.username,\n      password: this.password\n    }\n\n    //Register User\n    this.authService.registerUser(user).subscribe((data: any) => {\n      if (data.success) {\n        this.flashMessage.show(\"You are now Registered and Can LogIN\", { cssClass: 'alert-success text-center', timeout: 5000 });\n        this.router.navigate(['/login']);\n\n      }\n      else {\n        this.flashMessage.show(\"Something Went Wrong\", { cssClass: 'alert-danger text-center', timeout: 3000 });\n        this.router.navigate(['/register']);\n      }\n\n    })\n  }\n  logValidationErrors(group: FormGroup = this.register): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        this.formErrors[key] = '';\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty)) {\n          const messages = this.validationMessages[key];\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              this.formErrors[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n      }\n    })\n  }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\r\nimport { Patient } from '../Patient';\r\n\r\n@Pipe({\r\n    name: 'patientFilter'\r\n})\r\nexport class PatientFiterPipe implements PipeTransform {\r\n    transform(patients: Patient[], searchPatient: string): Patient[] {\r\n        if (!patients || !searchPatient) {\r\n            return patients;\r\n        }\r\n        return patients.filter(patient =>\r\n            patient.first_name.toLowerCase().indexOf(searchPatient.toLowerCase()) !== -1);\r\n    }\r\n\r\n}","module.exports = \"button.btn{\\r\\n    width: 70px;\\r\\n}\"","module.exports = \"<div>\\n  <h2 class=\\\"page-header text-center\\\">Patients</h2>\\n</div>\\n<div class=\\\"container\\\">\\n  <div class=\\\"column\\\">\\n    <div class=\\\"text-right\\\">\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"searchPatient\\\" placeholder=\\\"Search By First Name\\\" width=\\\"300px\\\">\\n    </div>\\n    <table class=\\\"table table-bordered table-hover table-dark\\\">\\n      <thead>\\n        <tr>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Name</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">DOB</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Email</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Address</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Phone</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Department</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Doctor</th>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Operations</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let patient of patients | patientFilter:searchPatient\\\">\\n          <th scope=\\\"row\\\">{{patient.first_name}} {{patient.last_name}}</th>\\n          <td>{{patient.DOB}}</td>\\n          <td>{{patient.email}}</td>\\n          <td>{{patient.address}},{{patient.city}},{{patient.province}},{{patient.postal_code}}</td>\\n          <td>{{patient.phone}}</td>\\n          <td>{{patient.department}}</td>\\n          <td>{{patient.doctor}}</td>\\n          <td>\\n            <div class=\\\"btn-toolbar\\\">\\n              <button style=\\\"width:100%\\\" class=\\\"btn btn-outline-info\\\" (click)=\\\"getSinglePatient(patient._id)\\\">Records</button>\\n              <button style=\\\"width:100%\\\" class=\\\"btn btn-outline-warning\\\" (click)=\\\"editPatient(patient._id)\\\">Edit</button>\\n              <button style=\\\"width:100%\\\" class=\\\"btn btn-outline-danger\\\" (click)=\\\"deletePatient(patient._id)\\\">Delete</button>\\n            </div>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\"","import { Component, OnInit, Injectable } from '@angular/core';\nimport { PatientService } from '../patient.service';\nimport { Patient } from '../Patient';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-view-patients',\n  templateUrl: './view-patients.component.html',\n  styleUrls: ['./view-patients.component.css'],\n})\n\n@Injectable()\nexport class ViewPatientsComponent implements OnInit {\n\n  patients: Patient[];\n  searchPatient: string;\n\n  constructor(\n    private patientService: PatientService,\n    private flashMessasge: FlashMessagesService,\n    private router: Router) { }\n\n  deletePatient(id: any) {\n    var patients = this.patients;\n    if (window.confirm(\"Are you sure you want to Delete this patient?\")) {\n      this.patientService.deletePatient(id)\n        .subscribe((data: any) => {\n          if (data.n == 1) {\n            for (var i = 0; i < patients.length; i++) {\n              if (patients[i]._id == id) {\n                patients.splice(i, 1);\n              }\n            }\n            this.flashMessasge.show('Deleted Sucessfully', { cssClass: 'alert-success text-center', timeout: 3000 });\n          }\n        });\n    }\n  }\n\n  getSinglePatient(id: any) {\n    this.patientService.getSinglePatient(id).subscribe((data: any) => {\n      this.patients = data;\n      this.patientService.setData(data);\n      this.router.navigate(['/records']);\n    });\n\n  }\n\n  editPatient(id: any) {\n    this.patientService.getSinglePatient(id).subscribe((data: any) => {\n      this.patients = data;\n      this.patientService.setData(data);\n      this.router.navigate(['/editPatient']);\n    })\n\n  }\n\n\n  ngOnInit() {\n    this.patientService.getPatients().subscribe((patients: any) => {\n      if (!patients.success) {\n        this.patients = patients;\n        return true;\n      }\n      if (this.patients.length <= 0) {\n        this.flashMessasge.show('No Patients Found', { cssClass: 'alert-danger text-center', timeout: 3000 })\n        return false;\n      }\n    })\n  }\n\n\n\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}